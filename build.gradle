allprojects {
    task hi {
        doLast { task -> println "Hi from $task.project.name" }
    }
}
subprojects { subproject ->
    apply plugin: 'java'
    group = 'pl.jlabs'
    version = '1.0'
    sourceCompatibility = 1.13 //System.getProperty("java.version")
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        if (subproject.name != 'data-model' && subproject.name != 'utils') {
            implementation project(":shared:data-model")
            implementation project(":shared:utils")
        }
        compileOnly 'org.projectlombok:lombok:1.18.10'
        annotationProcessor 'org.projectlombok:lombok:1.18.10'
        testImplementation "junit:junit:4.12"
    }
}
//TODO:: Read this:
//https://docs.gradle.org/current/userguide/working_with_files.html
//javadoc 2 pdf (uses buildscript {...}):
//https://github.com/sleroy/gradle-doc-plugin


//TODO:: clean up the file
//buildscript {
//    repositories {
//        mavenCentral()
//    }
//    dependencies {
//        classpath 'io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE'
//    }
//}
//plugins {
//    id "io.spring.dependency-management" version "1.0.8.RELEASE"
//}
//allprojects {
////    apply plugin: 'java'
//    version = '1.0'
//    task hello {
//        doLast { task ->
//            println "I'm $task.project.name"
//        }
//    }
//    afterEvaluate { project -> //https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:configuration_and_execution_of_a_single_project_build
//        if (project.hasTests) {
//            println "Adding test task to $project"
//            project.task('test') { doLast { println "Running tests for $project"} }
//        }
//    }
//}
//all of those from the end of:
//https://docs.gradle.org/current/userguide/build_lifecycle.html#build_lifecycle_events
//gradle.afterProject { project ->
//    if (project.state.failure) {
//        println "Evaluation of $project FAILED"
//    } else {
//        println "Evaluation of $project succeeded"
//    }
//}

